export * from '@trpc/client';
import { useMemo } from 'react';
import { c as createReactQueryUtilsProxy, a as createReactProxyDecoration, b as createHooksInternal } from './createHooksInternal-163d1042.mjs';
import '@trpc/server/shared';
import '@tanstack/react-query';

/**
 * @internal
 */ function createHooksInternalProxy(trpc) {
    const proxy = new Proxy(()=>{
    // noop
    }, {
        get (_obj, name) {
            if (name === 'useContext') {
                return ()=>{
                    const context = trpc.useContext();
                    // create a stable reference of the utils context
                    return useMemo(()=>{
                        return createReactQueryUtilsProxy(context);
                    }, [
                        context
                    ]);
                };
            }
            if (name in trpc) {
                return trpc[name];
            }
            if (typeof name === 'string') {
                return createReactProxyDecoration(name, trpc);
            }
            throw new Error('Not supported');
        }
    });
    return proxy;
}
function createTRPCReact() {
    const hooks = createHooksInternal();
    const proxy = createHooksInternalProxy(hooks);
    return proxy;
}

// interop:
/**
 * @deprecated use `createTRPCReact` instead
 */ function createReactQueryHooks() {
    const trpc = createHooksInternal();
    const proxy = createHooksInternalProxy(trpc);
    return {
        ...trpc,
        proxy
    };
}

export { createReactQueryHooks, createTRPCReact };
