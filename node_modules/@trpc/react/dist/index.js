'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var client = require('@trpc/client');
var React = require('react');
var createHooksInternal = require('./createHooksInternal-698b1183.js');
require('@trpc/server/shared');
require('@tanstack/react-query');

/**
 * @internal
 */ function createHooksInternalProxy(trpc) {
    const proxy = new Proxy(()=>{
    // noop
    }, {
        get (_obj, name) {
            if (name === 'useContext') {
                return ()=>{
                    const context = trpc.useContext();
                    // create a stable reference of the utils context
                    return React.useMemo(()=>{
                        return createHooksInternal.createReactQueryUtilsProxy(context);
                    }, [
                        context
                    ]);
                };
            }
            if (name in trpc) {
                return trpc[name];
            }
            if (typeof name === 'string') {
                return createHooksInternal.createReactProxyDecoration(name, trpc);
            }
            throw new Error('Not supported');
        }
    });
    return proxy;
}
function createTRPCReact() {
    const hooks = createHooksInternal.createHooksInternal();
    const proxy = createHooksInternalProxy(hooks);
    return proxy;
}

// interop:
/**
 * @deprecated use `createTRPCReact` instead
 */ function createReactQueryHooks() {
    const trpc = createHooksInternal.createHooksInternal();
    const proxy = createHooksInternalProxy(trpc);
    return {
        ...trpc,
        proxy
    };
}

exports.createReactQueryHooks = createReactQueryHooks;
exports.createTRPCReact = createTRPCReact;
Object.keys(client).forEach(function (k) {
  if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
    enumerable: true,
    get: function () { return client[k]; }
  });
});
