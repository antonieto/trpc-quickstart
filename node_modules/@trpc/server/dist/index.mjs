import { m as mergeWithoutOverrides, d as defaultFormatter, a as defaultTransformer, c as createRouterFactory, g as getDataTransformer, b as createBuilder, e as createMiddlewareFactory } from './resolveHTTPResponse-fa4e77dd.mjs';
export { f as assertNotBrowser, h as callProcedure, i as createInputMiddleware, j as createOutputMiddleware, a as defaultTransformer, g as getDataTransformer, p as procedureTypes, r as resolveHTTPResponse } from './resolveHTTPResponse-fa4e77dd.mjs';
export { r as router } from './router-b5b89d55.mjs';
export { T as TRPCError } from './TRPCError-e99e7cbe.mjs';
import './codes-f164ac85.mjs';
import './index-47817162.mjs';
import './transformTRPCResponse-c8138d5f.mjs';

function mergeRouters(...routerList) {
    const record = mergeWithoutOverrides({}, ...routerList.map((r)=>r._def.record));
    const errorFormatter = routerList.reduce((currentErrorFormatter, nextRouter)=>{
        if (nextRouter.errorFormatter && nextRouter.errorFormatter !== defaultFormatter) {
            if (currentErrorFormatter !== defaultFormatter && currentErrorFormatter !== nextRouter.errorFormatter) {
                throw new Error('You seem to have several error formatters');
            }
            return nextRouter.errorFormatter;
        }
        return currentErrorFormatter;
    }, defaultFormatter);
    const transformer = routerList.reduce((prev, current)=>{
        if (current.transformer && current.transformer !== defaultTransformer) {
            if (prev !== defaultTransformer && prev !== current.transformer) {
                throw new Error('You seem to have several transformers');
            }
            return current.transformer;
        }
        return prev;
    }, defaultTransformer);
    const router = createRouterFactory({
        errorFormatter,
        transformer
    })(record);
    return router;
}

function mergeRoutersGeneric(...args) {
    return mergeRouters(...args);
}

/**
 * TODO: This can be improved:
 * - We should be able to chain `.meta()`/`.context()` only once
 * - Simplify typings
 * - Doesn't need to be a class but it doesn't really hurt either
 */ class TRPCBuilder {
    context() {
        return new TRPCBuilder();
    }
    meta() {
        return new TRPCBuilder();
    }
    create(options) {
        return createTRPCInner()(options);
    }
}
/**
 * Initialize tRPC - be done exactly once per backend
 */ const initTRPC = new TRPCBuilder();
function createTRPCInner() {
    return function initTRPCInner(options) {
        const errorFormatter = options?.errorFormatter ?? defaultFormatter;
        const transformer = getDataTransformer(options?.transformer ?? defaultTransformer);
        const _config = {
            transformer,
            errorShape: null,
            ctx: null,
            meta: null
        };
        return {
            /**
       * These are just types, they can't be used
       * @internal
       */ _config,
            /**
       * Builder object for creating procedures
       */ procedure: createBuilder(),
            /**
       * Create reusable middlewares
       */ middleware: createMiddlewareFactory(),
            /**
       * Create a router
       */ router: createRouterFactory({
                errorFormatter,
                transformer
            }),
            /**
       * Merge Routers
       */ mergeRouters: mergeRoutersGeneric
        };
    };
}

export { initTRPC };
