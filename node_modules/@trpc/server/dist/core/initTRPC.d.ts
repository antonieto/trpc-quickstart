import { mergeRoutersGeneric } from './internals/__generated__/mergeRoutersGeneric';
import { DefaultErrorShape, ErrorFormatter, ErrorFormatterShape } from '../error/formatter';
import { CombinedDataTransformer, DataTransformerOptions, DefaultDataTransformer } from '../transformer';
import { CreateInitGenerics, InitGenerics, InitOptions } from './internals/config';
import { PickFirstDefined, ValidateShape } from './internals/utils';
declare type PartialInitGenerics = Partial<InitGenerics>;
declare type CreateInitGenericsFromPartial<TType extends PartialInitGenerics> = CreateInitGenerics<{
    ctx: TType['ctx'] extends InitGenerics['ctx'] ? TType['ctx'] : {};
    meta: TType['meta'] extends InitGenerics['meta'] ? TType['meta'] : {};
}>;
/**
 * TODO: This can be improved:
 * - We should be able to chain `.meta()`/`.context()` only once
 * - Simplify typings
 * - Doesn't need to be a class but it doesn't really hurt either
 */
declare class TRPCBuilder<TParams extends Partial<InitGenerics> = {}> {
    context<TNewContext extends InitGenerics['ctx']>(): TRPCBuilder<{ [TKey in "ctx" | keyof TParams]: TKey extends "ctx" ? {
        ctx: TNewContext;
    }[TKey] : TKey extends keyof TParams ? TParams[TKey] : never; }>;
    meta<TNewMeta extends InitGenerics['meta']>(): TRPCBuilder<{ [TKey in "meta" | keyof TParams]: TKey extends "meta" ? {
        meta: TNewMeta;
    }[TKey] : TKey extends keyof TParams ? TParams[TKey] : never; }>;
    create<TOptions extends Partial<InitOptions<CreateInitGenericsFromPartial<TParams>>>>(options?: ValidateShape<TOptions, Partial<InitOptions<CreateInitGenericsFromPartial<TParams>>>> | undefined): {
        /**
         * These are just types, they can't be used
         * @internal
         */
        _config: {
            ctx: TParams["ctx"] extends Record<string, unknown> ? TParams["ctx"] : {};
            meta: TParams["meta"] extends Record<string, unknown> ? TParams["meta"] : {};
            errorShape: ErrorFormatterShape<PickFirstDefined<TOptions["errorFormatter"], ErrorFormatter<TParams["ctx"] extends Record<string, unknown> ? TParams["ctx"] : {}, DefaultErrorShape>>>;
            transformer: TOptions["transformer"] extends DataTransformerOptions ? TOptions["transformer"] extends DataTransformerOptions ? CombinedDataTransformer : DefaultDataTransformer : DefaultDataTransformer;
        };
        /**
         * Builder object for creating procedures
         */
        procedure: import("./internals/procedureBuilder").ProcedureBuilder<{
            _config: {
                ctx: TParams["ctx"] extends Record<string, unknown> ? TParams["ctx"] : {};
                meta: TParams["meta"] extends Record<string, unknown> ? TParams["meta"] : {};
                errorShape: ErrorFormatterShape<PickFirstDefined<TOptions["errorFormatter"], ErrorFormatter<TParams["ctx"] extends Record<string, unknown> ? TParams["ctx"] : {}, DefaultErrorShape>>>;
                transformer: TOptions["transformer"] extends DataTransformerOptions ? TOptions["transformer"] extends DataTransformerOptions ? CombinedDataTransformer : DefaultDataTransformer : DefaultDataTransformer;
            };
            _ctx_in: TParams["ctx"] extends Record<string, unknown> ? TParams["ctx"] : {};
            _ctx_out: TParams["ctx"] extends Record<string, unknown> ? TParams["ctx"] : {};
            _input_in: typeof import("./internals/utils").unsetMarker;
            _input_out: typeof import("./internals/utils").unsetMarker;
            _output_in: typeof import("./internals/utils").unsetMarker;
            _output_out: typeof import("./internals/utils").unsetMarker;
            _meta: TParams["meta"] extends Record<string, unknown> ? TParams["meta"] : {};
        }>;
        /**
         * Create reusable middlewares
         */
        middleware: <TNewParams extends import("./procedure").ProcedureParams<{
            transformer: CombinedDataTransformer;
            errorShape: DefaultErrorShape;
            ctx: Record<string, unknown>;
            meta: Record<string, unknown>;
        }, unknown, unknown, unknown, unknown, unknown, unknown, unknown>>(fn: import("./middleware").MiddlewareFunction<{
            _config: {
                ctx: TParams["ctx"] extends Record<string, unknown> ? TParams["ctx"] : {};
                meta: TParams["meta"] extends Record<string, unknown> ? TParams["meta"] : {};
                errorShape: ErrorFormatterShape<PickFirstDefined<TOptions["errorFormatter"], ErrorFormatter<TParams["ctx"] extends Record<string, unknown> ? TParams["ctx"] : {}, DefaultErrorShape>>>;
                transformer: TOptions["transformer"] extends DataTransformerOptions ? TOptions["transformer"] extends DataTransformerOptions ? CombinedDataTransformer : DefaultDataTransformer : DefaultDataTransformer;
            };
            _ctx_in: TParams["ctx"] extends Record<string, unknown> ? TParams["ctx"] : {};
            _ctx_out: TParams["ctx"] extends Record<string, unknown> ? TParams["ctx"] : {};
            _input_out: unknown;
            _input_in: unknown;
            _output_in: unknown;
            _output_out: unknown;
            _meta: TParams["meta"] extends Record<string, unknown> ? TParams["meta"] : {};
        }, TNewParams>) => import("./middleware").MiddlewareFunction<{
            _config: {
                ctx: TParams["ctx"] extends Record<string, unknown> ? TParams["ctx"] : {};
                meta: TParams["meta"] extends Record<string, unknown> ? TParams["meta"] : {};
                errorShape: ErrorFormatterShape<PickFirstDefined<TOptions["errorFormatter"], ErrorFormatter<TParams["ctx"] extends Record<string, unknown> ? TParams["ctx"] : {}, DefaultErrorShape>>>;
                transformer: TOptions["transformer"] extends DataTransformerOptions ? TOptions["transformer"] extends DataTransformerOptions ? CombinedDataTransformer : DefaultDataTransformer : DefaultDataTransformer;
            };
            _ctx_in: TParams["ctx"] extends Record<string, unknown> ? TParams["ctx"] : {};
            _ctx_out: TParams["ctx"] extends Record<string, unknown> ? TParams["ctx"] : {};
            _input_out: unknown;
            _input_in: unknown;
            _output_in: unknown;
            _output_out: unknown;
            _meta: TParams["meta"] extends Record<string, unknown> ? TParams["meta"] : {};
        }, TNewParams>;
        /**
         * Create a router
         */
        router: <TProcRouterRecord extends import("./router").ProcedureRouterRecord>(opts: TProcRouterRecord) => import("./router").Router<import("./router").RouterDef<TParams["ctx"] extends Record<string, unknown> ? TParams["ctx"] : {}, ErrorFormatterShape<PickFirstDefined<TOptions["errorFormatter"], ErrorFormatter<TParams["ctx"] extends Record<string, unknown> ? TParams["ctx"] : {}, DefaultErrorShape>>>, TParams["meta"] extends Record<string, unknown> ? TParams["meta"] : {}, TProcRouterRecord>> & TProcRouterRecord;
        /**
         * Merge Routers
         */
        mergeRouters: typeof mergeRoutersGeneric;
    };
}
/**
 * Initialize tRPC - be done exactly once per backend
 */
export declare const initTRPC: TRPCBuilder<{}>;
export {};
//# sourceMappingURL=initTRPC.d.ts.map