import { TRPCError } from '../error/TRPCError';
import { ErrorFormatter } from '../error/formatter';
import { TRPCErrorShape } from '../rpc';
import { CombinedDataTransformer } from '../transformer';
import { RootConfig } from './internals/config';
import { ProcedureCallOptions } from './internals/procedureBuilder';
import { AnyMutationProcedure, AnyProcedure, AnyQueryProcedure, AnySubscriptionProcedure, Procedure, ProcedureArgs } from './procedure';
import { ProcedureType, inferProcedureOutput } from './types';
/** @internal **/
export declare type ProcedureRecord = Record<string, AnyProcedure>;
export declare type ProcedureRouterRecord = Record<string, AnyProcedure | AnyRouter>;
export interface ProcedureStructure {
    queries: Record<string, AnyQueryProcedure>;
    mutations: Record<string, AnyMutationProcedure>;
    subscriptions: Record<string, AnySubscriptionProcedure>;
    procedures: ProcedureRecord;
}
export interface RouterDef<TContext, TErrorShape extends TRPCErrorShape<number>, TMeta extends Record<string, unknown>, TRecord extends ProcedureRouterRecord> {
    router: true;
    /**
     * @internal
     */
    _ctx: TContext;
    /**
     * @internal
     */
    _errorShape: TErrorShape;
    /**
     * @internal
     */
    _meta: TMeta;
    errorFormatter: ErrorFormatter<TContext, TErrorShape>;
    transformer: CombinedDataTransformer;
    procedures: TRecord;
    record: TRecord;
    /**
     * V9 queries
     * @deprecated
     */
    queries: {};
    /**
     * V9 mutations
     * @deprecated
     */
    mutations: {};
    /**
     * V9 subscriptions
     * @deprecated
     */
    subscriptions: {};
}
export declare type AnyRouterDef<TContext = any> = RouterDef<TContext, any, any, any>;
/**
 * @internal
 */
export declare type inferHandlerInput<TProcedure extends AnyProcedure> = TProcedure extends Procedure<infer TDef> ? undefined extends TDef['_input_in'] ? unknown extends TDef['_input_in'] ? [(null | undefined)?] : [(TDef['_input_in'] | null | undefined)?] : [TDef['_input_in']] : [(undefined | null)?];
/**
 * @internal
 */
declare type inferHandlerFn<TProcedures extends ProcedureRecord> = <TProcedure extends TProcedures[TPath], TPath extends keyof TProcedures & string>(path: TPath, ...args: inferHandlerInput<TProcedure>) => Promise<inferProcedureOutput<TProcedure>>;
declare type DecorateProcedure<TProcedure extends AnyProcedure> = (input: ProcedureArgs<TProcedure['_def']>[0]) => Promise<TProcedure['_def']['_output_out']>;
/**
 * @internal
 */
declare type DecoratedProcedureRecord<TProcedures extends ProcedureRouterRecord> = {
    [TKey in keyof TProcedures]: TProcedures[TKey] extends AnyRouter ? DecoratedProcedureRecord<TProcedures[TKey]['_def']['record']> : TProcedures[TKey] extends AnyProcedure ? DecorateProcedure<TProcedures[TKey]> : never;
};
/**
 * @internal
 */
declare type RouterCaller<TDef extends AnyRouterDef> = (ctx: TDef['_ctx']) => {
    /**
     * @deprecated
     */
    query: inferHandlerFn<TDef['queries']>;
    /**
     * @deprecated
     */
    mutation: inferHandlerFn<TDef['mutations']>;
    /**
     * @deprecated
     */
    subscription: inferHandlerFn<TDef['subscriptions']>;
} & DecoratedProcedureRecord<TDef['record']>;
export interface Router<TDef extends AnyRouterDef> {
    _def: TDef;
    /** @deprecated **/
    errorFormatter: TDef['errorFormatter'];
    /** @deprecated **/
    transformer: TDef['transformer'];
    createCaller: RouterCaller<TDef>;
    getErrorShape(opts: {
        error: TRPCError;
        type: ProcedureType | 'unknown';
        path: string | undefined;
        input: unknown;
        ctx: undefined | TDef['_ctx'];
    }): TDef['_errorShape'];
}
/**
 * @internal
 */
export declare type RouterDefaultOptions<TContext> = Pick<AnyRouterDef<TContext>, 'transformer' | 'errorFormatter'>;
/**
 * @internal
 */
export declare type RouterBuildOptions<TContext> = Partial<Pick<AnyRouterDef<TContext>, 'procedures'>>;
export declare type AnyRouter = Router<any>;
/**
 *
 * @internal
 */
export declare function createRouterFactory<TConfig extends RootConfig>(defaults?: RouterDefaultOptions<TConfig['ctx']>): <TProcRouterRecord extends ProcedureRouterRecord>(opts: TProcRouterRecord) => Router<RouterDef<TConfig["ctx"], TConfig["errorShape"], TConfig["meta"], TProcRouterRecord>> & TProcRouterRecord;
/**
 * @internal
 */
export declare function callProcedure(opts: ProcedureCallOptions & {
    procedures: ProcedureRouterRecord;
}): Promise<unknown>;
export {};
//# sourceMappingURL=router.d.ts.map