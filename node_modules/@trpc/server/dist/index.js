'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var resolveHTTPResponse = require('./resolveHTTPResponse-f80439bb.js');
var router = require('./router-244a949f.js');
var TRPCError = require('./TRPCError-fe9113e5.js');
require('./codes-731f0a7c.js');
require('./index-9d687d33.js');
require('./transformTRPCResponse-11ac69cc.js');

function mergeRouters(...routerList) {
    const record = resolveHTTPResponse.mergeWithoutOverrides({}, ...routerList.map((r)=>r._def.record));
    const errorFormatter = routerList.reduce((currentErrorFormatter, nextRouter)=>{
        if (nextRouter.errorFormatter && nextRouter.errorFormatter !== resolveHTTPResponse.defaultFormatter) {
            if (currentErrorFormatter !== resolveHTTPResponse.defaultFormatter && currentErrorFormatter !== nextRouter.errorFormatter) {
                throw new Error('You seem to have several error formatters');
            }
            return nextRouter.errorFormatter;
        }
        return currentErrorFormatter;
    }, resolveHTTPResponse.defaultFormatter);
    const transformer = routerList.reduce((prev, current)=>{
        if (current.transformer && current.transformer !== resolveHTTPResponse.defaultTransformer) {
            if (prev !== resolveHTTPResponse.defaultTransformer && prev !== current.transformer) {
                throw new Error('You seem to have several transformers');
            }
            return current.transformer;
        }
        return prev;
    }, resolveHTTPResponse.defaultTransformer);
    const router = resolveHTTPResponse.createRouterFactory({
        errorFormatter,
        transformer
    })(record);
    return router;
}

function mergeRoutersGeneric(...args) {
    return mergeRouters(...args);
}

/**
 * TODO: This can be improved:
 * - We should be able to chain `.meta()`/`.context()` only once
 * - Simplify typings
 * - Doesn't need to be a class but it doesn't really hurt either
 */ class TRPCBuilder {
    context() {
        return new TRPCBuilder();
    }
    meta() {
        return new TRPCBuilder();
    }
    create(options) {
        return createTRPCInner()(options);
    }
}
/**
 * Initialize tRPC - be done exactly once per backend
 */ const initTRPC = new TRPCBuilder();
function createTRPCInner() {
    return function initTRPCInner(options) {
        const errorFormatter = options?.errorFormatter ?? resolveHTTPResponse.defaultFormatter;
        const transformer = resolveHTTPResponse.getDataTransformer(options?.transformer ?? resolveHTTPResponse.defaultTransformer);
        const _config = {
            transformer,
            errorShape: null,
            ctx: null,
            meta: null
        };
        return {
            /**
       * These are just types, they can't be used
       * @internal
       */ _config,
            /**
       * Builder object for creating procedures
       */ procedure: resolveHTTPResponse.createBuilder(),
            /**
       * Create reusable middlewares
       */ middleware: resolveHTTPResponse.createMiddlewareFactory(),
            /**
       * Create a router
       */ router: resolveHTTPResponse.createRouterFactory({
                errorFormatter,
                transformer
            }),
            /**
       * Merge Routers
       */ mergeRouters: mergeRoutersGeneric
        };
    };
}

exports.assertNotBrowser = resolveHTTPResponse.assertNotBrowser;
exports.callProcedure = resolveHTTPResponse.callProcedure;
exports.createInputMiddleware = resolveHTTPResponse.createInputMiddleware;
exports.createOutputMiddleware = resolveHTTPResponse.createOutputMiddleware;
exports.defaultTransformer = resolveHTTPResponse.defaultTransformer;
exports.getDataTransformer = resolveHTTPResponse.getDataTransformer;
exports.procedureTypes = resolveHTTPResponse.procedureTypes;
exports.resolveHTTPResponse = resolveHTTPResponse.resolveHTTPResponse;
exports.router = router.router;
exports.TRPCError = TRPCError.TRPCError;
exports.initTRPC = initTRPC;
