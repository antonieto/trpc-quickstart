/**
 * @internal
 */
export declare type identity<TType> = TType;
/**
 * @internal
 */
export declare type FlatOverwrite<TType, TWith> = identity<{
    [TKey in keyof TWith | keyof TType]: TKey extends keyof TWith ? TWith[TKey] : TKey extends keyof TType ? TType[TKey] : never;
}>;
/**
 * @public
 */
export declare type Maybe<TType> = TType | undefined | null;
/**
 * @internal
 */
export declare type ThenArg<TType> = TType extends PromiseLike<infer U> ? ThenArg<U> : TType;
/**
 * @internal
 */
export declare type Simplify<TType> = {
    [KeyType in keyof TType]: TType[KeyType];
};
/**
 * @public
 */
export declare type Dict<TType> = Record<string, TType | undefined>;
/**
 * @public
 */
export declare type MaybePromise<TType> = TType | Promise<TType>;
/**
 * @internal
 *
 * Creates a "lower-priority" type inference.
 * https://github.com/microsoft/TypeScript/issues/14829#issuecomment-322267089
 */
export declare type InferLast<TType> = TType & {
    [KeyType in keyof TType]: TType[KeyType];
};
/**
 * @public
 */
export declare type inferAsyncReturnType<TFunction extends (...args: any) => any> = ThenArg<ReturnType<TFunction>>;
declare type FilterKeys<TObj extends object, TFilter> = {
    [TKey in keyof TObj]: TObj[TKey] extends TFilter ? TKey : never;
}[keyof TObj];
/**
 * @internal
 */
export declare type Filter<TObj extends object, TFilter> = Pick<TObj, FilterKeys<TObj, TFilter>>;
export {};
//# sourceMappingURL=types.d.ts.map